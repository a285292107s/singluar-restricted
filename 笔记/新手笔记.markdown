# 新手笔记
## 流程重载的指令如何修改？
写在projects\rabbit\scripts\globals\setup\command.lua里
如下：

```lua
if (DEBUGGING) then
    --- 流程掌控
    Game().command("^-proc [a-zA-Z0-9_]+$", function(evtData)
        local p = string.trim(evtData.matchedString)
        p = string.sub(p, 7, string.len(p))
        local proc
        if (p == "this") then
            proc = ProcessCurrent
        else
            proc = Processes.get(p)
        end
        if (isProcess(proc)) then
            print(p .. "流程已重置")
            proc.start()
        end
    end)
end
```
将-proc改成你想要的指令。

注意 `string.sub(p, 7, string.len(p))`中这个`7`别忘了改。

## lua插件常用配置
```json
"files.autoSave": "afterDelay", // 自动保存
    "editor.renderWhitespace": "all", // 显示空格和制表符
    "editor.bracketPairColorization.enabled": true, // 启用括号对着色
    "editor.smoothScrolling": true, // 滚动时使用平滑动画
    "editor.cursorSmoothCaretAnimation": "on", // 光标在移动时使用平滑动画
    "files.insertFinalNewline": true, // 自动在文件末尾插入一个空行
    "files.trimFinalNewlines": true, // 自动删除文件末尾多余的空行（保持只有一个空行）
    "editor.stickyScroll.enabled": true, // 在顶部显示嵌套的当前作用域
    "editor.suggest.preview": true, // 预览当前建议的结果
    "Lua.completion.callSnippet": "Both",
    "Lua.hint.enable": true,//内联提示（inlay-hint），也被称作幽灵文本（ghost-text）。
    //联合类型中只要有一个子类型满足条件，则联合类型也满足条件。此设置为 false 时，number|boolean 类型无法赋给 number 类型；为 true 时则可以。
    "Lua.type.weakUnionCheck": true,
    //对联合类型进行类型检查时，忽略其中的 nil。此设置为 false 时，numer|nil 类型无法赋给 number 类型；为 true 是则可以。
    "Lua.type.weakNilCheck": true,
    "Lua.diagnostics.libraryFiles": "Enable",
    "Lua.doc.privateName": [
        "_"
    ],//以_开头代表私有变量
    "Lua.doc.protectedName": [
        "__"
    ],//以__开头代表受保护的变量
```
## .gitignore语法规则
<!-- 在 .gitignore 文件中，每一行的忽略规则的语法如下：
1、空格不匹配任意文件，可作为分隔符，可用反斜杠转义
2、以“＃”开头的行都会被 Git 忽略。即#开头的文件标识注释，可以使用反斜杠进行转义。
3、可以使用标准的glob模式匹配。所谓的glob模式是指shell所使用的简化了的正则表达式。
4、以斜杠"/"开头表示目录；"/"结束的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件；"/"开始的模式匹配项目跟目录；如果一个模式不包含斜杠，则它匹配相对于当前 .gitignore 文件路径的内容，如果该模式不在 .gitignore 文件中，则相对于项目根目录。
5、以星号"*"通配多个字符，即匹配多个任意字符；使用两个星号"**" 表示匹配任意中间目录，比如a/**/z可以匹配 a/z, a/b/z 或 a/b/c/z等。
6、以问号"?"通配单个字符，即匹配一个任意字符；
7、以方括号"[]"包含单个字符的匹配列表，即匹配任何一个列在方括号中的字符。比如[abc]表示要么匹配一个a，要么匹配一个b，要么匹配一个c；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配。比如[0-9]表示匹配所有0到9的数字，[a-z]表示匹配任意的小写字母）。
8、以叹号"!"表示不忽略(跟踪)匹配到的文件或目录，即要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。需要特别注意的是：如果文件的父目录已经被前面的规则排除掉了，那么对这个文件用"!"规则是不起作用的。也就是说"!"开头的模式表示否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用"!"也不会再次被包含。可以使用反斜杠进行转义。 -->

例如根目录下有一个文件bin.txt,文件夹bin，其中存在文件夹a，b，c

- bin.txt
- bin
    - a
    - b
    - c

`bin/`：匹配bin目录，及其下的所有文件和子目录（`bin/a`,`bin/b`,`bin/c`）

`bin/*`：匹配bin目录下的所有文件和子目录（`bin/a`,`bin/b`,`bin/c`）

两者都不会匹配`bin.txt`

如果需要`!bin/a`生效，要使用`bin/*`

如果使用`bin/`，那么在由于文件夹a的父节点bin被排除，所以文件路径断裂，无法搜索到a，哪怕它不在排除列表中。

`!bin/a`是将已经排除的a文件夹重新包含，但是并不会将其父级bin重新包含，而无法进入bin文件夹，里面的文件是否被排除都失去了意义，它们将无法被包含。

所以实现仅保留bin文件目录下方的a文件夹的正确的写法是：
```
bin/*
!bin/a
```
## lua插件3.6.17 存在的问题
self尚未支持泛型
当class B继承了class A，并调用A里的方法，插件就错误认为它是A了。
```lua
---@class A
local A
---@return self
function A.atk()
    
end

---@class B:A
local B
---@return self
function B.def()
    
end

local c=B.def().atk()//此时插件认为c的类型为A
```
